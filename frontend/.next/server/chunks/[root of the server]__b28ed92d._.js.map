{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://D%3A/okay/okay/frontend/backend/config/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/swasthya';\n\nexport const connectDB = async () => {\n  try {\n    console.log('Attempting to connect to MongoDB...');\n    console.log('MongoDB URI:', MONGODB_URI);\n    \n    const conn = await mongoose.connect(MONGODB_URI, {\n      serverSelectionTimeoutMS: 5000, // Timeout after 5s instead of 30s\n      socketTimeoutMS: 45000, // Close sockets after 45 seconds of inactivity\n    });\n\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n    console.log('Database name:', conn.connection.name);\n    \n    // Add connection event listeners\n    mongoose.connection.on('error', (err) => {\n      console.error('MongoDB connection error:', err);\n    });\n\n    mongoose.connection.on('disconnected', () => {\n      console.log('MongoDB disconnected');\n    });\n\n    return conn;\n  } catch (error) {\n    console.error('MongoDB connection error:', error);\n    throw error; // Re-throw the error to be handled by the caller\n  }\n};\n\nexport default connectDB;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAExC,MAAM,YAAY;IACvB,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,gBAAgB;QAE5B,MAAM,OAAO,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;YAC/C,0BAA0B;YAC1B,iBAAiB;QACnB;QAEA,QAAQ,GAAG,CAAC,CAAC,mBAAmB,EAAE,KAAK,UAAU,CAAC,IAAI,EAAE;QACxD,QAAQ,GAAG,CAAC,kBAAkB,KAAK,UAAU,CAAC,IAAI;QAElD,iCAAiC;QACjC,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC;YAC/B,QAAQ,KAAK,CAAC,6BAA6B;QAC7C;QAEA,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,gBAAgB;YACrC,QAAQ,GAAG,CAAC;QACd;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,OAAO,iDAAiD;IAChE;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file://D%3A/okay/okay/frontend/backend/models/Appointment.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst appointmentSchema = new mongoose.Schema({\n  patientName: {\n    type: String,\n    required: true,\n  },\n  patientPhone: {\n    type: String,\n    required: true,\n  },\n  village: {\n    type: String,\n    required: true,\n  },\n  appointmentDate: {\n    type: Date,\n    required: true,\n  },\n  doctorType: {\n    type: String,\n    required: true,\n  },\n  preferredTime: {\n    type: String,\n    required: true,\n  },\n  symptoms: {\n    type: String,\n    required: true,\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'confirmed', 'cancelled', 'completed'],\n    default: 'pending',\n  },\n  diagnosis: {\n    type: String,\n    default: '',\n  },\n  prescription: {\n    type: String,\n    default: '',\n  },\n  notes: {\n    type: String,\n    default: '',\n  },\n  appointmentTime: {\n    type: String,\n    required: false,\n  },\n  doctorEmail: {\n    type: String,\n    required: true,\n    default: 'default@example.com',\n  },\n  patientEmail: {\n    type: String,\n    required: true,\n    default: 'patient@example.com',\n  },\n}, {\n  timestamps: true,\n});\n\nconst Appointment = mongoose.models.Appointment || mongoose.model('Appointment', appointmentSchema);\n\nexport default Appointment;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,oBAAoB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAC5C,aAAa;QACX,MAAM;QACN,UAAU;IACZ;IACA,cAAc;QACZ,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,iBAAiB;QACf,MAAM;QACN,UAAU;IACZ;IACA,YAAY;QACV,MAAM;QACN,UAAU;IACZ;IACA,eAAe;QACb,MAAM;QACN,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;IACA,QAAQ;QACN,MAAM;QACN,MAAM;YAAC;YAAW;YAAa;YAAa;SAAY;QACxD,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,SAAS;IACX;IACA,cAAc;QACZ,MAAM;QACN,SAAS;IACX;IACA,OAAO;QACL,MAAM;QACN,SAAS;IACX;IACA,iBAAiB;QACf,MAAM;QACN,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,UAAU;QACV,SAAS;IACX;IACA,cAAc;QACZ,MAAM;QACN,UAAU;QACV,SAAS;IACX;AACF,GAAG;IACD,YAAY;AACd;AAEA,MAAM,cAAc,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,eAAe;uCAElE","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file://D%3A/okay/okay/frontend/app/api/appointments/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport connectDB from '@/backend/config/db';\nimport Appointment from '@/backend/models/Appointment';\n\nexport async function POST(request: NextRequest) {\n  try {\n    await connectDB();\n    const data = await request.json();\n\n    // Validate required fields\n    const requiredFields = [\n      'patientName',\n      'village',\n      'appointmentDate',\n      'doctorType',\n      'preferredTime',\n      'symptoms',\n      'appointmentTime',\n      'doctorEmail',\n      'patientEmail'\n    ];\n\n    for (const field of requiredFields) {\n      if (!data[field]) {\n        return NextResponse.json(\n          { error: `${field} is required` },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Validate date format\n    if (new Date(data.appointmentDate).toString() === 'Invalid Date') {\n      return NextResponse.json(\n        { error: 'Invalid appointment date format' },\n        { status: 400 }\n      );\n    }\n\n    // Set default status to pending\n    const appointmentData = {\n      ...data,\n      status: 'pending'\n    };\n\n    const appointment = await Appointment.create(appointmentData);\n    return NextResponse.json(appointment, { status: 201 });\n  } catch (error: any) {\n    console.error('POST Error:', error);\n    \n    // Handle MongoDB validation errors\n    if (error.name === 'ValidationError') {\n      const validationErrors = Object.values(error.errors).map((err: any) => err.message);\n      return NextResponse.json(\n        { error: 'Validation failed', details: validationErrors },\n        { status: 400 }\n      );\n    }\n\n    // Handle MongoDB duplicate key errors\n    if (error.code === 11000) {\n      return NextResponse.json(\n        { error: 'Duplicate appointment found' },\n        { status: 409 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: 'Failed to create appointment' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('Connecting to MongoDB...');\n    await connectDB();\n    console.log('Connected successfully');\n\n    const { searchParams } = new URL(request.url);\n    const doctorEmail = searchParams.get('doctorEmail');\n    \n    console.log('Search params:', Object.fromEntries(searchParams.entries()));\n    \n    let query = {};\n    if (doctorEmail) {\n      console.log('Using doctor email filter:', doctorEmail);\n      query = { ...query, doctorEmail };\n    } else {\n      console.log('No doctor email provided, fetching all appointments');\n    }\n    \n    console.log('Final query:', JSON.stringify(query));\n    const appointments = await Appointment.find(query)\n      .sort({ appointmentDate: -1, updatedAt: -1 })\n      .lean();\n    \n    console.log(`Found ${appointments.length} appointments`);\n    \n    // Log the first appointment if any exist\n    if (appointments.length > 0) {\n      console.log('Sample appointment:', JSON.stringify(appointments[0], null, 2));\n    }\n    \n    return NextResponse.json(appointments);\n  } catch (error) {\n    console.error('GET Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch appointments' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request: NextRequest) {\n  try {\n    await connectDB();\n    const data = await request.json();\n    const { id, ...updateData } = data;\n    \n    const appointment = await Appointment.findByIdAndUpdate(\n      id,\n      { $set: updateData },\n      { new: true }\n    ).lean();\n    \n    if (!appointment) {\n      return NextResponse.json(\n        { error: 'Appointment not found' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json(appointment);\n  } catch (error) {\n    console.error('PUT Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to update appointment' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(request: NextRequest) {\n  try {\n    await connectDB();\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n    \n    if (!id) {\n      return NextResponse.json(\n        { error: 'Appointment ID is required' },\n        { status: 400 }\n      );\n    }\n    \n    const appointment = await Appointment.findByIdAndDelete(id);\n    \n    if (!appointment) {\n      return NextResponse.json(\n        { error: 'Appointment not found' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({ message: 'Appointment deleted successfully' });\n  } catch (error) {\n    console.error('DELETE Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete appointment' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}